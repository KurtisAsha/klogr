{
  "hash": "1bdb7b542a0402d8b3bf08119aeb8aba",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Alternative Hover Text In Custom Function with  `plotly`\"\nauthor: \"Author: Kurtis Smith\"\ndate: \"2025-02-06\"\nslug: plotly-hover-var\nformat:\n  html:\n    fig-width: 10\n    fig-height: 6\ncategories: [self-tech-support, plotly, rlang, rstats]\nimage: \"image.png\"\nsummary: \"How to add alternative text when hovering over a value using `plotly` for R.\"\n---\n\n\n\n\n\n## Problem\n\nHow to add alternative text when hovering over a value using `plotly` for R.\n\nA few considerations I had to navigate:\n\n-   `plotly` behaves well when referencing columns already assigned in one of it's arguments, for this problem, the variable in question was in the assigned data but not assigned to any argument. In the example below, this would be the \"alt_text\" column\n\n-   The alternative text was to be passed into a custom function\n\n-   I found a workaround ([Thanks DJack from Stack Overflow](https://stackoverflow.com/posts/49902288/revisions)) which subsets data using \\$ but I needed to be able to pass any column through a custom function\n\nLet's begin with creating test data.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(plotly)\nlibrary(rlang)\n\n# Create data\ndf <- data.frame(\n x = 1,\n y = 1,\n text = \"text\",\n alt_text = \"alt_text\"\n)\n```\n:::\n\n\n\n\n\n## Solution\n\nThis **create_plot()** function demonstrates how referencing a column against an argument, allows easy access for the hovertemplate argument to be assigned one of those referenced columns. In this example - text.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_plot <- function(df, text){\n \n text <- enquo(text)\n\n  plot_ly(\n  data = df, \n  x = ~x, \n  y = ~y, \n  width = 300, \n  height = 300,\n  type = \"scatter\",\n  mode = \"text+marker\",\n  text = text,\n  # not necessary but demonstrates code differences\n  hovertemplate = text,\n  textfont = list(size = 50, color = \"#b44046\"))}\n```\n:::\n\n\n\n\n\nThis **create_plot_alt()** function demonstrates the difference in syntax. Inspired by Stack Overflows Djack but amended to suit a custom function, `rlang::quo_get_expr()` with \\[\\[\\]\\] allows for referencing additional columns.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_plot_alt <- function(df, text, alt_text){\n \n text <- enquo(text)\n alt_text <- enquo(alt_text)\n \n plot_ly(\n  data = df,\n  x = ~x, \n  y = ~y, \n  width = 300, \n  height = 300,\n  type = \"scatter\",\n  mode = \"text+marker\",\n  text = text,\n  textfont = list(size = 50, color = \"#57a2a4\"),\n  hovertemplate = df[[rlang::quo_get_expr(alt_text)]] \n  )\n \n}\n```\n:::\n\n\n\n\n\n**It works!**. The first plot with red text - on hover will show \"text\", whilst the second plot with blue text shows \"alt_text\"\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To remove elements not needed\nvoid <- list(\n  title = \"\",\n  zeroline = FALSE,\n  showline = FALSE,\n  showticklabels = FALSE\n)\n\np1 <- create_plot(df = df, text = text) %>% \n layout(xaxis = void, yaxis = void)\n\np_alt <- create_plot_alt(df = df, text = text, alt_text = alt_text) %>% \n layout(xaxis = void, yaxis = void)\n\n# same hover text as text plotted\n style(p1, showlegend = FALSE)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"htmlwidget-f94e61b9495695277d8d\" style=\"width:100%;height:650px;\" class=\"plotly html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f94e61b9495695277d8d\">{\"x\":{\"visdat\":{\"3b5016c72ee7\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"3b5016c72ee7\",\"attrs\":{\"3b5016c72ee7\":{\"x\":{},\"y\":{},\"mode\":\"text+marker\",\"text\":{},\"hovertemplate\":{},\"textfont\":{\"size\":50,\"color\":\"#b44046\"},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\"}},\"layout\":{\"width\":300,\"height\":300,\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"\",\"zeroline\":false,\"showline\":false,\"showticklabels\":false},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"\",\"zeroline\":false,\"showline\":false,\"showticklabels\":false},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[1],\"y\":[1],\"mode\":\"text+marker\",\"text\":\"text\",\"hovertemplate\":\"text\",\"textfont\":{\"size\":50,\"color\":\"#b44046\"},\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null,\"showlegend\":false}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n\n```{.r .cell-code}\n# alternative hover text\n style(p_alt, showlegend = FALSE) \n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"htmlwidget-7582b82b817b14cd028e\" style=\"width:100%;height:650px;\" class=\"plotly html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7582b82b817b14cd028e\">{\"x\":{\"visdat\":{\"3b505c994b82\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"3b505c994b82\",\"attrs\":{\"3b505c994b82\":{\"x\":{},\"y\":{},\"mode\":\"text+marker\",\"text\":{},\"textfont\":{\"size\":50,\"color\":\"#57a2a4\"},\"hovertemplate\":\"alt_text\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\"}},\"layout\":{\"width\":300,\"height\":300,\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"\",\"zeroline\":false,\"showline\":false,\"showticklabels\":false},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"\",\"zeroline\":false,\"showline\":false,\"showticklabels\":false},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[1],\"y\":[1],\"mode\":\"text+marker\",\"text\":\"text\",\"textfont\":{\"size\":50,\"color\":\"#57a2a4\"},\"hovertemplate\":\"alt_text\",\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null,\"showlegend\":false}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n\n# Conclusion\n\nGetting this to work took me too long to admit and later became more complicated by passing a SharedData R6 class object for use with the `crosstalk` package. I'll leave that battle for another day. Taking wins where I can, I'll bank this fix and look to explore `rlang` in more detail in the future.\n\n## Acknowledgements\n\n[r-bloggers.com](r-bloggers.com) for the reach, platform, and content\n\nPackages and package maintainer(s):\n\n-   plotly \\| Carson Sievert\n-   rlang \\| Lionel Henry\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}