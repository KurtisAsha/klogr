{
  "hash": "0d50591a6c598d509600a21752757578",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Rolling 5-year Sum Label Using `slider`\"\nauthor: \"Author: Kurtis Smith\"\ndate: \"2024-10-22\"\nslug: rolling-sum-label\nformat:\n  html:\n    fig-width: 10\n    fig-height: 6\ncategories: [self-tech-support, slider, rstats]\nimage: \"image.png\"\nsummary: \"Finding a way to label a rolling 5-year sum for plotting using the `slider` package.\"\n---\n\n\n\n\n\n## Problem\n\nFirst blog post off the back of an issue at work which required desktop research to figure out. This content aims to better cement my learning and to share to anyone who has been afflicted with a similar issue.\n\nFor context, I was unable to download new packages and only had the `slider` package available. Notable packages which came up in research are `zoo` and `TTR` which could provide similar results I'm sure, but the focus here is on `slider`.\n\nWhilst calculating a rolling sum took a little while to figure out, the greater block was generating a label for plotting.\n\nLet's begin with setting global options and getting data.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(tidyverse)\nlibrary(slider)\n\ntheme_set(theme_minimal(\n base_family = 'serif', base_size = 12))\n\nset.seed(4321)\n\n# Get data\nexample_df <- bind_rows(\n tibble(group = \"group_1\",\n  year = c(1991:1993, 1995, 2000:2005),\n  to_add = sample(1:40, 10)),\n \n tibble(group = \"group_2\",\n  year = c(2000:2005),\n  to_add = sample(1:40, 6)))\n```\n:::\n\n\n\n\n\n## Calculate Rolling Sum\n\nCalculate the rolling sum using an reference column or index, in this instance year. Set before argument to 4 which will then include the value itself to provide a rolling 5 year window. This code is using the `_int` variant of the `slide_index_*` functions for integer but there are equivalents for double, logical, character, and data frame.\n\nIn the function(s) `slide_index_*` you can't reference the column that's being iterated on. Instead I used the `slide` function to generate labels for plotting.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_df %>%\n group_by(group) %>% \n arrange(year) %>%\n mutate(\n  # Calculate rolling sum\n  rolling_5_years = slide_index_int(to_add, year, sum, .before = 4),\n  # Generate rolling sum labels\n  rolling_5_years_label = slide(year, ~.x, .before = 4) %>%\n   as.character() %>%\n   unlist()\n ) %>% \n head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n# Groups:   group [1]\n  group    year to_add rolling_5_years rolling_5_years_label          \n  <chr>   <dbl>  <int>           <int> <chr>                          \n1 group_1  1991     27              27 1991                           \n2 group_1  1992     29              56 c(1991, 1992)                  \n3 group_1  1993     10              66 c(1991, 1992, 1993)            \n4 group_1  1995     15              81 c(1991, 1992, 1993, 1995)      \n5 group_1  2000     24              24 c(1991, 1992, 1993, 1995, 2000)\n```\n\n\n:::\n:::\n\n\n\n\n\nNote that this function helpfully counts missing values within the sequence. See above example, 1994 is missing but for 1995 the rolling years sum of 65 includes only 1991, 1992, 1993, and 1995 `to_add` values.\n\nNow to visualise!\n\n## Visualise\n\nImportant to note when using `slide` to make a label, when the groups starting index value mismatch you will get the below plot which does look messy.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_df %>%\n group_by(group) %>% \n arrange(year) %>%\n mutate(\n  # Calculate rolling sum\n  rolling_5_years = slide_index_int(to_add, year, sum, .before = 4),\n  # Generate rolling sum labels\n  rolling_5_years_label = slide(year, ~.x, .before = 4) %>%\n   as.character() %>%\n   unlist()\n ) %>% \n ggplot(aes(x = rolling_5_years, \n            y = rolling_5_years_label, \n            fill = group)) +\n geom_col(position = \"dodge\", colour = \"white\") +\n labs(title = \"Rolling 5 year period example\",\n      subtitle = \"A little messy\", \n      x = \"\", y = \"\") +\n scale_fill_viridis_d(alpha = 0.75, name = \"\") +\n theme(\n  legend.position = \"top\",\n  plot.title.position = \"plot\"\n ) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n\n\n\nYou may be required to include mismatched starting index values for your use case. But if that's not the case and you want to provide a bit more clarity to the plot - I've filtered to exclude any year before 2000, now both groups start at the same year / the same starting index value.\n\nNot all rolling years have the same number of years unless you add the `.complete = TRUE` argument. Be sure to filter out NA's afterwards.\n\nI've coded the labels to collapse years into colon format to maximise plot space.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set base rolling value the same\nexample_rolling_sum <- example_df %>%\n filter(!year < 2000) %>% \n group_by(group) %>% \n arrange(year) %>%\n mutate(\n  # Calculate rolling sum\n  rolling_5_years = slide_index_int(to_add, year, sum, .before = 4, .complete = TRUE),\n  # Generate rolling sum labels\n  rolling_5_years_label = slide(as.double(year), ~.x, .before = 4, .complete = TRUE) %>%\n   map(~paste(min(.), \":\", max(.))) %>% \n   unlist()\n )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There were 16 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `rolling_5_years_label = `%>%`(...)`.\nℹ In group 1: `group = \"group_1\"`.\nCaused by warning in `min()`:\n! no non-missing arguments to min; returning Inf\nℹ Run `dplyr::last_dplyr_warnings()` to see the 15 remaining warnings.\n```\n\n\n:::\n\n```{.r .cell-code}\n # Plot\n example_rolling_sum %>% \n filter(!is.na(rolling_5_years)) %>% \n ggplot(aes(x = rolling_5_years, \n            y = rolling_5_years_label, \n            fill = group)) +\n geom_col(position = \"dodge\", colour = \"white\") +\n  labs(title = \"Rolling 5 year period example\", \n       subtitle = \"Pretty\",\n       x = \"\", y = \"\") +\n scale_fill_viridis_d(alpha = 0.75, name = \"\") +\n theme(\n  legend.position = \"top\",\n  plot.title.position = \"plot\"\n ) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n\n\n# Conclusion\n\nI think `slider` is a great package, was I forced to use it because I couldn't download any other package - sure. But would I use it again given the keys to CRAN, yep. Hope this tidbit about labels helped in some small way. That brings me to the end of the first self-tech-support blog.\n\n## Acknowledgements\n\n[r-bloggers.com](r-bloggers.com) for the reach, platform, and content\n\nPackages and package maintainer(s):\n\n-   slider \\| Davis Vaughan\n-   tidyverse \\| Hadley Wickham\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}